#!/usr/bin/env python3

import argparse
import pw2py as pw
import numpy as np
import copy


def parse_command_line():
    ''' parse command line options '''
    parser = argparse.ArgumentParser(
        description="Read in two files and reorder atoms so that they match (according to distance)"
    )
    parser.add_argument(
        'file1', metavar='file1', type=str, help="first qe input or atomic geometry file to read in"
    )
    parser.add_argument(
        'file2', metavar='file2', type=str, help="second qe input or atomic geometry file to read in"
    )
    parser.add_argument(
        '-i', '--inplace', action='store_true', help="overwrite the contents of file2"
    )
    parser.add_argument(
        '-f', '--ftype', metavar='arg', type=str, help='format type of output, can be: [qeinp|vasp|xsf|xyz|jdftx]',
        default=None
    )

    return parser.parse_args()


def find_nearest(pos, geo):
    '''
    calculated distance of pos w.r.t. geo.pos, return closest
    '''
    gdistance = geo.calc_distance(pos)
    return np.argmin(gdistance)


def reorder_atoms(geo1, geo2, write_geo=None, inplace=False, ftype=None):
    ''' reorder positions of geo2, returning new geo with matching orders to fit geo1 '''
    # convert atomic positions to angstrom (so distances are true)
    for obj in [geo1, geo2]:
        obj.pos_units = 'angstrom'
    if write_geo is not None:
        write_geo.pos_units = 'angstrom'
    else:
        copy2 = copy.deepcopy(geo2)
    # swap positions based on nearest neighbor index
    for i, pos in enumerate(geo1.pos):
        corrected_i = find_nearest(pos, geo2)
        if write_geo is not None:
            write_geo.pos[i] = geo2.pos[corrected_i]
            if ftype == 'qeinp':
                write_geo.if_pos[i] = geo2.if_pos[corrected_i]
        else:
            copy2.pos[i] = geo2.pos[corrected_i]
            if ftype == 'qeinp':
                copy2.if_pos[i] = geo2.if_pos[corrected_i]
    # convert back to crystal and return
    if write_geo is not None:
        write_geo.pos_units = 'crystal'
        return
    else:
        copy2.pos_units = 'crystal'
        if inplace:
            geo2 = copy2
            return
        else:
            return copy2


def fix_boundaries(geo1, geo2, inplace=False):
    # convert atomic positions to crystal (so can easily decrement increment positions by integers)
    for obj in [geo1, geo2]:
        obj.pos_units = 'crystal'
    # calculate difference and round to int
    diff = np.rint(geo1.pos - geo2.pos)
    # apply diff and return
    if inplace:
        geo2.pos += diff
        return
    else:
        copy2 = copy.deepcopy(geo2)
        copy2.pos += diff
        return copy2


if __name__ == '__main__':
    args = parse_command_line()

    # check for ftype
    ftype = pw._determine_ftype(args.file2) if args.ftype is None \
        else args.ftype.lower()

    # read in geo
    geo1 = pw.atomgeo.from_file(args.file1)
    geo2 = pw.qeinp.from_file(args.file2) if ftype == 'qeinp' \
        else pw.atomgeo.from_file(args.file2)

    # read in copy of file2 to overwrite
    fix2 = pw.qeinp.from_file(args.file2) if ftype == 'qeinp' \
        else pw.atomgeo.from_file(args.file2)

    # swap positions based on nearest neighbor index
    reorder_atoms(geo1, geo2, write_geo=fix2, ftype=ftype)

    # fix boundary atoms
    fix_boundaries(geo1, fix2, inplace=True)

    if args.inplace:
        fix2.write_file(args.file2, sort=False)
    else:
        if ftype == 'qeinp':
            print(fix2)
        else:
            print(fix2.to_string(ftype=ftype, sort=False))
