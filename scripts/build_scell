#!/usr/bin/env python3

import argparse
import numpy as np
import pw2py as pw
import itertools as it
from scipy.spatial import Delaunay


def parse_command_line():
    ''' parse command line options '''
    parser = argparse.ArgumentParser(
        description="Build simple supercells"
    )
    parser.add_argument(
        'filein', metavar='filein', type=str, help="qe input file"
    )
    parser.add_argument(
        'expand', metavar='expand', type=str, help="integer expansion along lattice directions"
    )
    parser.add_argument(
        '-s', '--shrink', action='store_true',
        help="shrink lattice instead of expanding (only makes sense for pristine)"
    )
    parser.add_argument(
        '-o', '--overlap', action='store_true',
        help="disable checking for overlapping atoms at boundary"
    )
    parser.add_argument(
        '-i', '--inplace', action='store_true',
        help="if enabled, input file is overwritten"
    )

    return parser.parse_args()


def remove_overlapping_atoms(inp: pw.qeinp, thresh: float = 0.1):
    ''' remove atoms with equivelent positions '''

    # TODO
    raise NotImplementedError("Sorry removing overlapping atoms not finished!")

    index_to_remove = []
    for i in range(inp.nat):
        if i in index_to_remove:
            continue
        nseries = inp.nearest_neighbor(i, return_type='df').iloc[0]
        if nseries['dist'] < thresh:
            index_to_remove.append(nseries.name)
    inp.remove_indices(index_to_remove)


def fix_ibrav(inp: pw.qeinp):
    ''' fix small input bravais lattice parameters (if in use) '''
    if inp.nml.ibrav != 0:
        if 'a' in inp.nml['system']:
            inp.nml.a = inp.par[0, 0]
        if 'b' in inp.nml['system']:
            inp.nml.b = inp.par[1, 1]
        if 'c' in inp.nml['system']:
            inp.nml.c = inp.par[2, 2]
        if 'celldm' in inp.nml['system']:
            raise ValueError("celldm not implemented!!")


if __name__ == "__main__":
    args = parse_command_line()
    inp = pw.qeinp.from_file(args.filein)
    expand = np.fromstring(args.expand, sep=' ', dtype=int)
    assert len(expand) == 3, \
        f"Must provide 3 integers for expanding, passed: {expand}"
    if not args.shrink:
        inp.build_supercell(expand)
        fix_ibrav(inp)
    else:
        inp.shift_pos_to_unit()
        inp.pos_units = 'angstrom'
        inp.par = [p / e for p, e in zip(inp.par, expand)]
        # build points of the cell
        points_of_cell = \
            [inp.par.T.dot(prod).T for prod in it.product([0, 1], repeat=3)]
        # build Delaunay tesselation: https://stackoverflow.com/questions/29311682/finding-if-point-is-in-3d-poly-in-python # noqa
        dly = Delaunay(points_of_cell)
        # remove atoms not in new par
        index_to_remove = [
            i for i, pos in enumerate(inp.pos)if dly.find_simplex(pos) < 0
        ]

        # remove atoms
        inp.remove_indices(index_to_remove)
        # convert to crystal
        inp.pos_units = 'crystal'
        if args.overlap:
            # also need to to check for atoms on the boundary
            remove_overlapping_atoms(inp)
        # fix ibrav
        fix_ibrav(inp)
    # output
    if args.inplace:
        inp.write_file(args.filein)
    else:
        print(inp)
