#!/usr/bin/env python3

import argparse
import warnings
import numpy as np


qesmearing2jdftx = {
    'gaussian': 'Gauss',
    'gauss': 'Gauss',
    'methfessel-paxton': 'MP1',
    'm-p': 'MP1',
    'mp': 'MP1',
    'marzari-vanderbilt': 'Cold',
    'cold': 'Cold',
    'm-v': 'Cold',
    'mv': 'Cold',
    'fermi-dirac': 'Fermi',
    'f-d': 'Fermi',
    'fd': 'Fermi'
}


def parse_command_line():
    ''' parse command line options '''
    parser = argparse.ArgumentParser(
        description="Convert QE input file to jdftx format"
    )
    parser.add_argument(
        'qefile', metavar='qefile', type=str, help="path to quantum espresso inp/out file"
    )
    parser.add_argument(
        '-t', '--trunc', metavar='arg', type=str, help="add 2d coulomb truncation lines, specify center of slab",
        default=None
    )
    parser.add_argument(
        '-d', '--defect', metavar='arg', type=str,
        help="list of indices (base 1) or position (if float) for location of charged defect, for multiple defects seperate by ','",  # noqa
        default=None
    )
    parser.add_argument(
        '-c', '--corr', metavar='arg', type=str, help="options for charged defect correction i.e. dtot file",
        default=None
    )
    parser.add_argument(
        '-m', '--mag', action='store_true', help="disable conversion of starting_magnetization which can fail"
    )
    parser.add_argument(
        '-f', '--fixd', metavar='arg', type=str, help="enables fix-electron-density with specified prefix",
        default=None
    )

    return parser.parse_args()


def arr2str(arr) -> str:
    return ' '.join([str(a) for a in arr])


def qestartingmag2jdftx(inp):
    out = ""
    ion_counts = {
        ion: count for ion, count in
        zip(*np.unique(inp.ion, return_counts=True))
    }
    for ion, mag in zip(inp.card.ATOMIC_SPECIES, inp.nml.starting_magnetization):
        # 4 here is arbitrary conversion (p=3, d=5)
        out += f" {ion}" + (f" {mag * 4}" * ion_counts[ion])

    return out


def qeinp2jdftx(qefile, **kwargs):
    # read input and reformat
    inp = pw.qeinp.from_file(qefile)

    out = ""
    ####################################
    # default settings -- always written
    ####################################
    out += (
        "# Generated from the PW2PY python module\n"
        "\n"
        "# default settings\n"
        "include atom.pos\n"
        'initial-state charge.$VAR\n'
        "dump-name charge.$VAR\n"
        "dump End State Dtot EigStats\n"
    )

    if ('fixd' not in kwargs) or (kwargs['fixd'] is None):
        out += "electronic-SCF  energyDiffThreshold 1e-7 nIterations 200\n"
    out += "\n"

    ####################################
    # read and converted lines from qeinp
    ####################################
    out += "# read and converted from qeinp\n"
    # pseudo
    pseudo_file_name = inp.card.ATOMIC_SPECIES[inp.ion[0]][1]
    if 'ONCV' in pseudo_file_name:
        out += (
            "ion-species SG15/$ID_ONCV_PBE-1.1.upf\n"
            "ion-species SG15/$ID_ONCV_PBE-1.0.upf\n"
        )
    elif 'uspp' in pseudo_file_name:
        out += "ion-species GBRV/$ID_pbe.uspp\n"
    else:
        warnings.warn('PSEUDO ONLY WORKS FOR ONCV AND GBRV')
    # other
    out += (
        f"elec-cutoff {inp.nml.ecutwfc/2} {inp.nml.ecutrho/2 if 'ecutrho' in inp.nml['system'] else ''}\n"
        f"{'spintype z-spin' if ('nspin' in inp.nml['system']) and (inp.nml.nspin == 2) else ''}\n"
        f"kpoint-folding {arr2str(inp.kpt[0]) if inp.card.K_POINTS == 'automatic' else '1 1 1'}\n"
    )
    if ('occupations' in inp.nml['system']) and inp.nml.occupations == ('smearing'):
        out += f"elec-smearing {qesmearing2jdftx[inp.nml.smearing]} {inp.nml.degauss/2}\n"
    if 'tot_charge' in inp.nml['system']:
        out += f"elec-initial-charge {-inp.nml.tot_charge}\n"
    if (not args.mag) and ('starting_magnetization' in inp.nml['system']):
        out += f"initial-magnetic-moments{qestartingmag2jdftx(inp)}\n"
    if 'tot_magnetization' in inp.nml['system']:
        out += f"elec-initial-magnetization {inp.nml.tot_magnetization} yes\n"
    out += "\n"

    ####################################
    # options enabled by user at runtime
    ####################################
    if 'trunc' in kwargs and kwargs['trunc'] is not None:
        out += ((
            "# enabled by user option --trunc\n"
            "coulomb-interaction Slab 001\n"
            f"coulomb-truncation-embed {kwargs['trunc']}\n"
        ))
        out += "\n"

    if 'defect' in kwargs and kwargs['defect'] is not None:
        assert 'tot_charge' in inp.nml['system'], \
            "tot_charge must be in qe input file in order to use --defect"

        out += "# enabled by user option --defect\n"
        # partition charge if the user specified several defects
        number_of_defects = kwargs['defect'].count(',') + 1
        defect_charge = -inp.nml.tot_charge / number_of_defects
        # iterate through comma seperated defect options
        for defect_option in kwargs['defect'].split(','):
            if "." in defect_option:
                # contains a float, absolute position given
                cd_pos = np.fromstring(defect_option, sep=' ')
            else:
                # integers, correspond to indices
                indices = np.fromstring(defect_option, sep=' ', dtype=int) - 1
                cd_pos = np.average(inp.pos[indices], axis=0)
            out += f"charged-defect {arr2str(cd_pos)} {defect_charge} 1\n"
        out += "\n"

    if 'corr' in kwargs and kwargs['corr'] is not None:
        out += ((
            "# enabled by user option --corr\n"
            f"charged-defect-correction {kwargs['corr']} 8. 1.\n"
        ))
        out += "\n"

    if ('fixd' in kwargs) and (kwargs['fixd'] is not None):
        out += ((
            "# enabled by user option --fixd\n"
            f"fix-electron-density {kwargs['fixd']}.$VAR\n"

        ))
        out += "\n"

    return out


if __name__ == '__main__':
    args = parse_command_line()
    import pw2py as pw

    # read qe input and write to jdftx file
    out = qeinp2jdftx(args.qefile,
                      trunc=args.trunc, defect=args.defect, corr=args.corr, fixd=args.fixd)

    # write atomic positions
    geo = pw.atomgeo.from_file(args.qefile)
    geo.write_file('atom.pos')

    print(out)
