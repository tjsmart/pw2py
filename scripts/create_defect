#!/usr/bin/env python3

import argparse
import numpy as np
import pw2py as pw


def parse_command_line():
    ''' parse command line options '''
    parser = argparse.ArgumentParser(
        description="Build simple supercells"
    )
    parser.add_argument(
        'defect', metavar='defect', type=str, help="defect type can be vacancy, substitution, or interstitial"
    )
    parser.add_argument(
        'option', metavar='option', type=str, help=(
            "if vac: indices of atoms to remove e.g. '1 2 3'"
            " | if sub: indices and species of atoms to subsitute (comma seperated) e.g. '1 N, 2 H, 3 O'"
            " | if int: position and species of atoms to add (comma seperated) e.g. '1.9 7.2 3.0 B, 2.1 5.3 8.0 O'"
        )
    )
    parser.add_argument(
        'filein', metavar='filein', type=str, help="input quantum espresso file"
    )
    parser.add_argument(
        '-i', '--inplace', action='store_true', help="if enabled, filein is overwritten"
    )

    return parser.parse_args()


def parse_defect(defect):
    ''' parse user specified defect '''
    _defect = defect.lower()
    if _defect == 'v' or _defect == 'vac' or _defect == 'vacancy' or _defect == 'vacancies':
        return 'v'
    elif _defect == 's' or _defect == 'sub' or _defect == 'substitution' or _defect == 'substitutions':
        return 's'
    elif _defect == 'i' or _defect == 'int' or _defect == 'interstitial' or _defect == 'interstitials':
        return 'i'
    else:
        raise ValueError(f"Unrecognized value for defect: {defect}")


if __name__ == "__main__":
    args = parse_command_line()
    defect = parse_defect(args.defect)
    inp = pw.qeinp.from_file(args.filein)
    # TODO
    if defect == 's' or defect == 'i':
        raise NotImplementedError(
            "subsitutional and interstitial defects not yet implemented! :/")
        # TODO -- see above on idea for handling option
    elif defect == 'v':
        sep = ',' if ',' in args.option else ' '
        indices = np.fromstring(args.option, sep=sep, dtype=int) - 1
        inp.remove_indices(indices)

    # write to stdout or overwite
    if args.inplace:
        inp.write_file(args.filein)
    else:
        print(inp)
